1. 
	i.  
		curl
	ii. 
		2537 instances of the character a
		630 instances of character g
		I determined this using the find command in my text editor
	iii.
		Using a text editor( I use Sublime ), I can change all instances of a variable with a keyboard shortcut ( 'command + control + g' in this case ). Just find a unique instance of that variable declaration or assignment. In this case ' a=' would work. 
	iv.
2
	iii.
		Find unused code using Chrome Dev Tools audit functions. These bits were found to be unused:

			#footer-container
			#footer
			small, .small
			#footer #copyright

		Use git blame src/style.css from the repo root to determine who committed the code. 
	iv.
		I went ahead and used sass to compile the scss.
3.
	i.
		I would ask the client to triple check thir authorization details( usernames, passwords, client ids, client secrets etc. ), and check that they are trying to access the correct resource.
	ii.
		For a 500 Internal Error, we would have to find out what resource they are trying to access. If the endpoint is valid, a 500 response would indicate an issue with the resource, therefore, an issue on the API side. Time to dig through internal error logs and run tests.
	iii.
		GET and POST are HTTP methods used for the retrieval of resources, and the sending of resources for the purpose of updating existing resources, respectively. Using them incorrectly could result in errors if the endpoint is not designed to handle parameters( for instance a GET request with parameters), or a lack of parameters, that may result from using these HTTP requests incorrectly.
4.
	Create Users table with indexes

	CREATE TABLE Users
	(
	id INT NOT NULL,
	username VARCHAR(255) NOT NULL,
	email VARCHAR(255) NOT NULL,
	signUpDate DATETIME DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id)
	)
	#PRIMARY KEY automatically indexed here^^.

	CREATE INDEX usernameIndex
	ON Users (username)

	#Creates index on the username

	i.
		SELECT username, signUpDate, COUNT(username) 
		FROM users
		GROUP BY username
		HAVING ( COUNT(username) > 1 )
	ii.
		SELECT DISTINCT email
		FROM
		(
			SELECT username, signUpDate, COUNT(username) 
			FROM users
			GROUP BY username
			HAVING ( COUNT(username) > 1 )
		)
	iii.
		SELECT id, username, email
		FROM Users
		WHERE id NOT IN (SELECT user_id FROM user_actions)
	iv.
		ALTER TABLE Users
		ADD UNIQUE (username)

5.
	i.
		For the first, the status returned is 404 Not Found. The second is 200 Ok. The second link is valid. 
	ii.
		Use the ?page parameter to increases the number of pages returned( 30 items per page by default ).
	iii.
		Yes, using this parameter one could return 200 repos. One could also use the ?per_page parameter to set the pagination limit to 200, and return just one page if they so wished.
	iv.
		#Below is a simple(and abbreviated) ruby script to parse out the repo names
		#The curl script can be found in curl_repo.sh 
		#the actual parse script can be found in opower_repos.rb

		require 'json'

		repos = '[
	  {
	    "id": 7656623,
	    "name": "AFNetworking",
	    ...
	    ...
	    }
		]'

		# parse github JSON return
		json_repos = JSON.parse(repos)
		#get num of returned repos(30)
		repos_count = json_repos.count
		#Create place to store names
		repo_names = []
		# Set iterator variable
		i = 0

		while i < repos_count do
		  repo_names.push(json_repos[i]["name"])
		  i+= 1
		end
